# Artifice

The Artifice File System is a pseudo file system which exists in the free space of another file system. By doing so, Artifice remains hidden from suspecting users and hence can be used to store information with concrete deniability. Artifice is implemented using device mapper, and it performs a block to block mapping of information.

For contributions to this project, please contact `Austen Barker` at atbarker@ucsc.edu.

Artifice was developed at the UC Santa Cruz [Storage Systems Research Center](https://www.ssrc.ucsc.edu/index.html) (SSRC) with support from National  Science  Foundation  grant  number  IIP-1266400, and award CNS-1814347.

It is described in the workshop paper ["Artifice: A Deniable Steganographic File System"](https://www.ssrc.ucsc.edu/pub/barker-foci19.html) presented at [FOCI'19](https://www.usenix.org/conference/foci19) and the conference paper ["Artifice: Data in Disguise"](https://www.ssrc.ucsc.edu/pub/barker-msst20.html) presented at [MSST'20](https://storageconference.us/).

Some of the cryptographic implementations for Artifice are contained in [this repository](https://github.com/kyle-fredrickson/artifice-crypto).


### Collaborators

`Yash Gupta`, ygupta@ucsc.edu

`Eugene Chou` euchou@ucsc.edu

`Darrell Long` darrell@ucsc.edu

`Sabrina Au` scau@ucsc.edu

`Kyle Fredrickson` kyfredi@ucsc.edu

`James Houghton` jhoughton@virginia.edu

`Ethan Miller` elm@ucsc.edu

## Build

Artifice is tested on and designed for Linux kernel versions 4.4 to 5.0.

```
$ make
$ sudo insmod dm-afs.ko afs_debug_mode=1
$ sudo rmmod dm_afs
```
Please look at the Makefile targets `debug_create`, `debug_mount` and `debug_end` for information on how to setup a dm-target.

There are also a variety of other Makefile targets for benchmarking and IO testing that also appear with the `debug_*` prefix. 

## Design

![Artifice Design Overview](https://github.com/atbarker/Artifice/blob/master/doc/newartificediagram.png)

The design portion of this markdown is not intended to be reference information. It won't make sense unless you read from start to end.

This design document has **NOT** been updated for information on a `shadow` (nested) Artifice instance.

Something to make clear before we proceed. A block, or a pointer to a block, is represented by a `32 bit` integer in Artifice. This means that we can, at max, reference `~4 billion` blocks. Since a block is `4KB`, it means we can reference, at max, a disk of size `16TB`. `64 bit` block pointer support is pending.

### Structure

Before we can explain the design of Artifice, it is important to understand it's structure and its usage. Artifice acts like a virtual block device on top of an existing device. 

Hence, when you create a dm-target for `artifice`, you will have a block device which may look like `/dev/mapper/artifice` (depending on how you name your instance). Any kind of I/O on this virtual block device is sent over to the Artifice kernel module. This module intercepts this IO, remaps it to the location it needs to be remapped to, and then "submits" it. 

Accordingly, the idea is that one will format `/dev/mapper/artifice` with a file system such as "FAT32", and Artifice can remap each of the FAT32 writes over to an underlying physical block device (such as `/dev/sdb`). Based on our design, we will only utilize the free blocks in the file system on `/dev/sdb`, hence, `/dev/sdb` needs to be formatted with a supported file system, and there should be enough free space left in that underlying file system to fit the desired Artifice volume(s).

Support for underlying file systems is added through `modules`.

### Modules

By now you should be comfortable with understanding the hierarchy of file systems in Artifice. There is the file system which is used on `/dev/mapper/artifice` virtual block device (we call this the active file system), and then there is the file system present on the underlying physical block device such as `/dev/sdb` (we call this the passive file system). The idea is that writes onto the active file system are mapped into the free space of 